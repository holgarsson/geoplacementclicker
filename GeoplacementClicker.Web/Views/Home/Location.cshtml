@model  GeoplacementClicker.Web.Models.Home.LocationViewModel
@{
    ViewData["Title"] = "Location";
}

<style>
    /* Set the size of the div element that contains the map */
    #map {
        height: 400px; /* The height is 400 pixels */
        width: 100%; /* The width is the width of the web page */
    }
</style>

<ul class="list-group list-group-flush">
    <li class="list-group-item"><b>Id:</b> @Model.DataEntryId</li>
    <li class="list-group-item"><b>Device EUI:</b> @Model.EUI</li>
    <li class="list-group-item"><b>Latitude:</b> @Model.Latitude</li>
    <li class="list-group-item"><b>Longitude:</b> @Model.Longitude</li>
</ul>

<!--The div element for the map -->
<div id="map"></div>
<script>
    // Initialize and add the map
    function initMap() {
        // The location of Uluru
        var uluru = { lat: @Model.Latitude, lng: @Model.Longitude };
        // The map, centered at Uluru
        var map = new google.maps.Map(
            document.getElementById('map'), { zoom: 16, center: uluru });
        // The marker, positioned at Uluru
        var marker = new google.maps.Marker({ position: uluru, map: map });
    }
</script>
<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDYxioY_89cTwe0fQ3oWspVs-BuY-D3fqw&callback=initMap">
</script>